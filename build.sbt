import CommonAutoPlugin._import org.apache.commons.io.FileUtilsimport org.scalajs.core.tools.linker.backend.OutputMode.ECMAScript6lazy val shared         = (crossProject.crossType(CrossType.Pure) in file("shared"))                            .settings(                              (                                SjsDependencies.tagsAndDom ++                                SjsDependencies.css ++                                SjsDependencies.pickling ++                                SjsDependencies.functional ++                                SjsDependencies.reactive                              ).toSettingsDefinition(): _*)lazy val sharedJvm      = shared.jvmlazy val sharedJs       = shared.jslazy val client         = project                            .enablePlugins(ScalaJSPlugin, SbtWeb)                            .dependsOn(sharedJs)                            .settings(                              (                                SjsDependencies.audiovideo ++                                SjsDependencies.data ++                                SjsDependencies.databind ++                                SjsDependencies.lensing ++                                SjsDependencies.logging ++                                SjsDependencies.reactive ++                                SjsDependencies.reactjs                                ).toSettingsDefinition(),                              scalaJSStage in Global := FastOptStage,                              jsEnv in Global := NodeJSEnv().value,                              persistLauncher in Compile := true,                              managedResourceDirectories in Compile <+= baseDirectory(_ / "assets"),                              jsDependencies ++=                                Seq(                                  ProvidedJS./("jquery.js"),                                  ProvidedJS./("index-bundle.js") dependsOn "jquery.js"                                ),                              jsDependencyFilter := (_.filter(!_.relPath.endsWith("paths.js"))),                              scalaJSOutputMode := ECMAScript6                            )lazy val    server =        project                              .dependsOn(sharedJvm)                              .enablePlugins(AssemblyPlugin, SbtNativePackager, JavaAppPackaging)                              .settings(                                copyWebJarResources := { streams.value.log("Copying webjar resources")                                  val `Web Modules target directory` = (resourceDirectory in Compile).value / "assets"                                  val `Web Modules source directory` = (WebKeys.public in Assets in client).value                                  final class UsefulFileFilter(acceptable: String*) extends FileFilter {                                    // TODO ADJUST TO EXCLUDE JS MAP FILES                                    import scala.collection.JavaConversions._                                    def accept(file: File) = (file.isDirectory && FileUtils.listFiles(file, acceptable.toArray, true).nonEmpty) || acceptable.contains(file.ext) && !file.name.contains(".js.")                                  }                                  val `file filter` = new UsefulFileFilter("css", "scss", "sass", "less", "map")                                  IO.createDirectory(`Web Modules target directory`)                                  IO.copyDirectory(source = `Web Modules source directory`, target = `Web Modules target directory` / "script")                                  FileUtils.copyDirectory(`Web Modules source directory`, `Web Modules target directory` / "style", `file filter`)                                },                                // run the copy after compile/assets but before managed resources                                copyWebJarResources <<= copyWebJarResources dependsOn(compile in Compile, WebKeys.assets in Compile in client, fastOptJS in Compile in client),                                managedResources in Compile <<= (managedResources in Compile) dependsOn copyWebJarResources,                                resourceGenerators in Compile <+= Def.task {                                  val files = ((crossTarget in(client, Compile)).value ** ("*.js" || "*.map")).get                                  val mappings: Seq[(File,String)] = files pair rebase((crossTarget in(client, Compile)).value, ((resourceManaged in  Compile).value / "assets/").getAbsolutePath )                                  val map: Seq[(File, File)] = mappings.map { case (s, t) => (s, file(t))}                                  IO.copy(map).toSeq                                },                                reStart <<= reStart dependsOn (copyResources in Compile) ,                                libraryDependencies ++= (                                  JvmDependencies.akka                ++                                    JvmDependencies.jarlocating         ++                                    JvmDependencies.functional          ++                                    JvmDependencies.mgmt                ++                                    JvmDependencies.serverPickling      ++                                    JvmDependencies.logging             ++                                    JvmDependencies.serialization       ++                                    JvmDependencies.testing                                  ),                                dockerBaseImage in Docker := "hseeberger/scala-sbt",                                dockerExposedPorts in Docker := Seq(1234),                                dockerUpdateLatest in Docker := true                              )